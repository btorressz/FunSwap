{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "INITIAL_SUPPLY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SWAP_AMOUNT1",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SWAP_AMOUNT2",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deadline",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "funSwap",
				"outputs": [
					{
						"internalType": "contract FunSwap",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "partyA",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "partyB",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testApproveSwapByPartyA",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testApproveSwapByPartyB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testCannotExpireBeforeDeadline",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testExpireSwapAfterDeadline",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testExtendDeadline",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testRecoverTokensAfterExpiration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testSwapCompletion",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token1",
				"outputs": [
					{
						"internalType": "contract TestToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token2",
				"outputs": [
					{
						"internalType": "contract TestToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Initializes partyA as the deployer and partyB as a mock address"
				},
				"testApproveSwapByPartyA()": {
					"details": "PartyA approves the token transfer and calls the FunSwap contract's approveSwap function"
				},
				"testApproveSwapByPartyB()": {
					"details": "This test assumes that PartyB is manually set in Remix, and approves the token transfer"
				},
				"testCannotExpireBeforeDeadline()": {
					"details": "Attempts to expire the swap before the deadline and expects failure"
				},
				"testExpireSwapAfterDeadline()": {
					"details": "Ensure that the test runs after the swap's deadline has passed, and expire the swap"
				},
				"testExtendDeadline()": {
					"details": "PartyA extends the deadline and checks if the new deadline is set correctly"
				},
				"testRecoverTokensAfterExpiration()": {
					"details": "Calls the recoverTokens function and checks if the tokens were transferred back to PartyA"
				},
				"testSwapCompletion()": {
					"details": "Checks the isCompleted state of the FunSwap contract"
				}
			},
			"title": "FunSwapTest - Test suite for FunSwap contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Deploys tokens and sets up the FunSwap contract for testing"
				},
				"testApproveSwapByPartyA()": {
					"notice": "Tests whether PartyA can approve and initiate the swap for Token1"
				},
				"testApproveSwapByPartyB()": {
					"notice": "Tests whether PartyB can approve and initiate the swap for Token2"
				},
				"testCannotExpireBeforeDeadline()": {
					"notice": "Tests that the swap cannot expire before the deadline"
				},
				"testExpireSwapAfterDeadline()": {
					"notice": "Tests whether the swap can expire after the deadline"
				},
				"testExtendDeadline()": {
					"notice": "Tests whether PartyA can extend the swap deadline"
				},
				"testRecoverTokensAfterExpiration()": {
					"notice": "Tests whether PartyA can recover tokens after the swap expires"
				},
				"testSwapCompletion()": {
					"notice": "Tests whether the swap is marked as completed after both approvals"
				}
			},
			"notice": "This contract contains test cases to verify the functionality of the FunSwap contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/FunSwapTest.sol": "FunSwapTest"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
				"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/FunSwap.sol": {
			"keccak256": "0x109056a5847711c7ade5da7c77d2b967b2d77759e6cfd157c839ab7cd503d31f",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4e269d32c705370b052f2acd592e3eaff0e3742aa119bae73ccd616d0630ec2",
				"dweb:/ipfs/QmT6StUQMhmArR4by62vyDf3nLkPcwzxCxfuQxiGZo6BLS"
			]
		},
		"tests/FunSwapTest.sol": {
			"keccak256": "0x93a8dceafb199395b450077042110c7820277681235eab97630a0e1b4a4a5039",
			"license": "MIT",
			"urls": [
				"bzz-raw://35ef144db06003fccb21adb6129b82fcabc0c6550ab723c184b74fa4cc3c6b4d",
				"dweb:/ipfs/QmRDc6iX91JxZaQke5J1M5hyqKEBhEmdfk1sG6c4DoDEDB"
			]
		}
	},
	"version": 1
}